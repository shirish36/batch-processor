name: Deploy to GCP Cloud Run Job

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      image_tag:
        description: 'Image tag to deploy (e.g., test-20250811-033649 or latest)'
        required: true
        default: 'latest'
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  JFROG_REGISTRY_URL: ${{ secrets.JFROG_REGISTRY_URL }}
  DOCKER_REPO: shirish-docker-docker-local
  IMAGE_NAME: batch-processor

jobs:
  deploy:
    name: Deploy to GCP Cloud Run Job
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Display deployment info
      run: |
        echo "üöÄ Deploying to GCP Cloud Run Job"
        echo "üì¶ Image: ${{ env.JFROG_REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        echo "üåç Environment: ${{ inputs.environment }}"
        echo "üìç GCP Project: ${{ env.GCP_PROJECT_ID }}"
        echo "üìç GCP Region: ${{ env.GCP_REGION }}"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for GCP
      run: |
        echo "Configuring Docker for Google Container Registry..."
        gcloud auth configure-docker --quiet

    - name: Authenticate Docker with JFrog
      run: |
        echo "Authenticating Docker with JFrog Artifactory..."
        echo "${{ secrets.JFROG_PASSWORD }}" | docker login ${{ env.JFROG_REGISTRY_URL }} \
          --username "${{ secrets.JFROG_USERNAME }}" \
          --password-stdin

    - name: Pull image from JFrog
      run: |
        echo "Pulling image from JFrog Artifactory..."
        SOURCE_IMAGE="${{ env.JFROG_REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        echo "Source image: $SOURCE_IMAGE"
        
        # Pull the image from JFrog
        docker pull "$SOURCE_IMAGE"
        
        # Tag for Google Container Registry
        GCR_IMAGE="gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        docker tag "$SOURCE_IMAGE" "$GCR_IMAGE"
        
        echo "‚úÖ Image pulled and tagged for GCR: $GCR_IMAGE"
        echo "GCR_IMAGE=$GCR_IMAGE" >> $GITHUB_ENV

    - name: Push image to Google Container Registry
      run: |
        echo "Pushing image to Google Container Registry..."
        docker push "${{ env.GCR_IMAGE }}"
        echo "‚úÖ Image pushed to GCR successfully"

    - name: Deploy to Cloud Run Job
      run: |
        echo "Deploying to Cloud Run Job..."
        
        JOB_NAME="batch-processor-${{ inputs.environment }}"
        
        # Update the Cloud Run Job with the new image
        gcloud run jobs replace-traffic $JOB_NAME \
          --image="${{ env.GCR_IMAGE }}" \
          --region="${{ env.GCP_REGION }}" \
          --quiet
        
        echo "‚úÖ Cloud Run Job updated successfully"
        echo "üìù Job Name: $JOB_NAME"
        echo "üîó Console: https://console.cloud.google.com/run/jobs/details/${{ env.GCP_REGION }}/$JOB_NAME?project=${{ env.GCP_PROJECT_ID }}"

    - name: Test job execution (optional)
      if: inputs.environment == 'dev'
      run: |
        echo "üß™ Testing job execution in dev environment..."
        
        JOB_NAME="batch-processor-${{ inputs.environment }}"
        
        # Execute the job
        EXECUTION_NAME=$(gcloud run jobs execute $JOB_NAME \
          --region="${{ env.GCP_REGION }}" \
          --format="value(metadata.name)")
        
        echo "üöÄ Job execution started: $EXECUTION_NAME"
        echo "üîó Execution logs: https://console.cloud.google.com/run/jobs/details/${{ env.GCP_REGION }}/$JOB_NAME/executions/$EXECUTION_NAME?project=${{ env.GCP_PROJECT_ID }}"
        
        # Wait a bit and check status
        sleep 30
        
        STATUS=$(gcloud run jobs executions describe $EXECUTION_NAME \
          --region="${{ env.GCP_REGION }}" \
          --format="value(status.conditions[0].type)")
        
        echo "üìä Execution status: $STATUS"

    - name: Deployment summary
      if: always()
      run: |
        echo "üéâ Deployment Summary"
        echo "===================="
        echo "‚úÖ Source: ${{ env.JFROG_REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        echo "‚úÖ Target: ${{ env.GCR_IMAGE }}"
        echo "‚úÖ Cloud Run Job: batch-processor-${{ inputs.environment }}"
        echo "‚úÖ Environment: ${{ inputs.environment }}"
        echo ""
        echo "üîó Useful Links:"
        echo "  - GCP Console: https://console.cloud.google.com/run/jobs?project=${{ env.GCP_PROJECT_ID }}"
        echo "  - Job Details: https://console.cloud.google.com/run/jobs/details/${{ env.GCP_REGION }}/batch-processor-${{ inputs.environment }}?project=${{ env.GCP_PROJECT_ID }}"

    - name: Clean up local images
      if: always()
      run: |
        echo "Cleaning up local images..."
        docker rmi "${{ env.JFROG_REGISTRY_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}" || true
        docker rmi "${{ env.GCR_IMAGE }}" || true
        echo "‚úÖ Cleanup complete"
